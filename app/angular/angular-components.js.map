{"version":3,"sources":["canvas/spCanvas.directive.js","canvas/spPixel.directive.js","constants/CANVAS_EVENTS.js","constants/COLOR_PRESETS.js","settings/spColor.directive.js","settings/spFunctions.directive.js","settings/spResolution.directive.js","settings/spSettings.service.js","settings/spSettingsPanel.directive.js","settings/spToolbox.directive.js","settings/TOOLBOX.js","util/util.service.js"],"names":[],"mappingshrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjfile":"angular-components.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad.canvas')\r\n        .directive('spCanvas', spCanvas);\r\n\r\n    spCanvas.$inject = [];\r\n    function spCanvas() {\r\n        // Usage:\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            bindToController: true,\r\n            controller: spCanvasController,\r\n            controllerAs: 'vm',\r\n            link: link,\r\n            replace: true,\r\n            restrict: 'E',\r\n            scope: {\r\n                width: '=',\r\n                height: '='\r\n            },\r\n            templateUrl: 'angular/src/canvas/spCanvas.tpl.html'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n        }\r\n    }\r\n    /* @ngInject */\r\n    spCanvasController.$inject = ['$scope', 'spSettings', 'CANVAS_EVENTS'];\r\n    function spCanvasController ($scope, spSettings, CANVAS_EVENTS) {\r\n        var vm = this; // jshint ignore:line\r\n\r\n        vm.display = false;\r\n        vm.pixelsX = null;\r\n        vm.pixelsY = null;\r\n        vm.pixelWidth = null;\r\n        vm.pixelHeight = null;\r\n        vm.show = show;\r\n        vm.sizeX = null;\r\n        vm.sizeY = null;\r\n\r\n        init();\r\n\r\n        /////////////////\r\n\r\n        $scope.$on(CANVAS_EVENTS.resize, function () {\r\n            var res = spSettings.getRes();\r\n\r\n            if (res.x !== vm.pixelsX.length || res.y !== vm.pixelsY.length) {\r\n                init();\r\n            }\r\n        });\r\n\r\n        /////////////////\r\n\r\n        function init() { // jshint ignore:line\r\n            vm.display = false;\r\n\r\n            if (typeof vm.height !== 'number') {\r\n                throw 'Expected number as height';\r\n            }\r\n            if (typeof vm.width !== 'number') {\r\n                throw 'Expected number as width';\r\n            }\r\n\r\n            var res = spSettings.getRes();\r\n\r\n            vm.pixelsX = [];\r\n            for (var i = 1; i <= res.x; i++) {\r\n                vm.pixelsX.push(i);\r\n            }\r\n\r\n            vm.pixelsY = [];\r\n            for (var j = 1; j <= res.y; j++) {\r\n                vm.pixelsY.push(j);\r\n            }\r\n\r\n            vm.pixelWidth = Math.floor(vm.width / res.x);\r\n            vm.pixelHeight = Math.floor(vm.height / res.y);\r\n            vm.sizeX = res.x * vm.pixelWidth;\r\n            vm.sizeY = res.y * vm.pixelHeight;\r\n\r\n            if (vm.pixelWidth < 1) {\r\n                throw 'Pixel width <= 0 not acceptable';\r\n            }\r\n            if (vm.pixelHeight < 1) {\r\n                throw 'Pixel height <= 0 not acceptable';\r\n            }\r\n            if (vm.sizeX < 1) {\r\n                throw 'Canvas width <= 0 not acceptable';\r\n            }\r\n            if (vm.sizeY < 1) {\r\n                throw 'Canvas height <= 0 not acceptable';\r\n            }\r\n\r\n            vm.display = true;\r\n        }\r\n\r\n        function show() {\r\n            return vm.display;\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad.canvas')\r\n        .directive('spPixel', spPixel);\r\n\r\n    spPixel.$inject = ['spSettings', 'CANVAS_EVENTS', 'TOOLBOX', 'util'];\r\n    function spPixel(spSettings, CANVAS_EVENTS, TOOLBOX, util) {\r\n        // Usage:\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            bindToController: true,\r\n            controller: spPixelController,\r\n            controllerAs: 'vm',\r\n            link: link,\r\n            restrict: 'E',\r\n            scope: {\r\n                posX: '=',\r\n                posY: '=',\r\n                height: '=',\r\n                width: '='\r\n            },\r\n            templateUrl: 'angular/src/canvas/spPixel.tpl.html'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs, globalCtrl) {\r\n            scope.$on(CANVAS_EVENTS.clear, function () {\r\n                var color = spSettings.getBG();\r\n\r\n                scope.vm.color.red = color.red;\r\n                scope.vm.color.green = color.green;\r\n                scope.vm.color.blue = color.blue;\r\n            });\r\n\r\n            scope.$on(CANVAS_EVENTS.invert, function () {\r\n                scope.vm.color.red = 255 - scope.vm.color.red;\r\n                scope.vm.color.green = 255 - scope.vm.color.green;\r\n                scope.vm.color.blue = 255 - scope.vm.color.blue;\r\n            });\r\n            \r\n            scope.$on(CANVAS_EVENTS.random, function () {\r\n                var color = util.randomColor();\r\n                \r\n                scope.vm.color.red = color.red;\r\n                scope.vm.color.green = color.green;\r\n                scope.vm.color.blue = color.blue;\r\n            })\r\n        }\r\n    }\r\n    /* @ngInject */\r\n    spPixelController.$inject = ['spSettings', 'CANVAS_EVENTS', 'TOOLBOX', 'util'];\r\n    function spPixelController (spSettings, CANVAS_EVENTS, TOOLBOX, util) {\r\n        var vm = this; // jshint ignore:line\r\n\r\n        vm.color = {red: 255, green: 255, blue: 255};\r\n        vm.mouseEnter = mouseEnter;\r\n        vm.mouseLeave = mouseLeave;\r\n\r\n        init();\r\n\r\n        ///////////////\r\n\r\n        function init() {\r\n            var color = spSettings.getBG();\r\n\r\n            vm.color.red = color.red;\r\n            vm.color.green = color.green;\r\n            vm.color.blue = color.blue;\r\n        }\r\n\r\n        function mouseEnter() {\r\n            var tool = spSettings.getTool();\r\n            var color = null;\r\n            if (tool === TOOLBOX.pencil) {\r\n                color = spSettings.getColor();\r\n            } else if (tool === TOOLBOX.eraser) {\r\n                color = spSettings.getBG();\r\n            }\r\n\r\n            if (util.isRGB(color)) {\r\n                vm.color.red = color.red;\r\n                vm.color.green = color.green;\r\n                vm.color.blue = color.blue;\r\n            }\r\n        }\r\n\r\n        function mouseLeave() {\r\n\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n\r\n    angular.module('sketchpad.constants').constant('CANVAS_EVENTS', {\r\n        clear: 'canvas-clear',\r\n        invert: 'canvas-invert',\r\n        random: 'canvas-random',\r\n        resize: 'canvas-resize'\r\n    });\r\n\r\n})();\r\n","(function () {\r\n    \r\n    angular.module('sketchpad.constants').constant('COLOR_PRESETS', {\r\n        black: {\r\n            red: 0,\r\n            green: 0,\r\n            blue: 0\r\n        },\r\n        red: {\r\n            red: 255,\r\n            green: 0,\r\n            blue: 0\r\n        },\r\n        green: {\r\n            red: 0,\r\n            green: 255,\r\n            blue: 0\r\n        },\r\n        blue: {\r\n            red: 0,\r\n            green: 0,\r\n            blue: 255\r\n        },\r\n        yellow: {\r\n            red: 255,\r\n            green: 255,\r\n            blue: 0\r\n        },\r\n        magenta: {\r\n            red: 255,\r\n            green: 0,\r\n            blue: 255\r\n        },\r\n        cyan: {\r\n            red: 0,\r\n            green: 255,\r\n            blue: 255\r\n        },\r\n        white: {\r\n            red: 255,\r\n            green: 255,\r\n            blue: 255\r\n        }\r\n    });\r\n    \r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad.settings')\r\n        .directive('spColor', spColor);\r\n\r\n    spColor.$inject = ['spSettings', 'COLOR_PRESETS'];\r\n    function spColor(spSettings, COLOR_PRESETS) {\r\n        // Usage:\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            bindToController: true,\r\n            controller: spColorController,\r\n            controllerAs: 'vm',\r\n            link: link,\r\n            restrict: 'E',\r\n            scope: {\r\n            },\r\n            templateUrl: 'angular/src/settings/spColor.tpl.html'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n            scope.$watch('vm.preset', function (newValue, oldValue) {\r\n                if (typeof newValue === 'string' && COLOR_PRESETS.hasOwnProperty(newValue)) {\r\n                    var color = COLOR_PRESETS[newValue];\r\n                    \r\n                    scope.vm.red = color.red;\r\n                    scope.vm.green = color.green;\r\n                    scope.vm.blue = color.blue;\r\n                    \r\n                    spSettings.setColor(color.red, color.green, color.blue);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /* @ngInject */\r\n    spColorController.$inject = ['spSettings', 'COLOR_PRESETS'];\r\n    function spColorController (spSettings, COLOR_PRESETS) {\r\n        var vm = this; // jshint ignore:line\r\n        \r\n        vm.red = null;\r\n        vm.green = null;\r\n        vm.blue = null;\r\n        vm.COLOR_PRESETS = COLOR_PRESETS;\r\n        vm.preset = null;\r\n        vm.reset = reset;\r\n        vm.submit = submit;\r\n        \r\n        init();\r\n        \r\n        ///////////////\r\n        \r\n        function init() {\r\n            var color = spSettings.getColor();\r\n            vm.red = color.red;\r\n            vm.green = color.green;\r\n            vm.blue = color.blue;\r\n        }\r\n        \r\n        function reset() {\r\n            spSettings.setColor(0,0,0);\r\n            init();\r\n        }\r\n        \r\n        function submit() {\r\n            spSettings.setColor(vm.red, vm.green, vm.blue);\r\n            vm.preset = null;\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad.settings')\r\n        .directive('spFunctions', spFunctions);\r\n\r\n    spFunctions.$inject = [];\r\n    function spFunctions() {\r\n        // Usage:\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            bindToController: true,\r\n            controller: spFunctionsController,\r\n            controllerAs: 'vm',\r\n            link: link,\r\n            restrict: 'E',\r\n            scope: {\r\n            },\r\n            templateUrl: 'angular/src/settings/spFunctions.tpl.html'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n        }\r\n    }\r\n    /* @ngInject */\r\n    spFunctionsController.$inject = ['$rootScope', 'spSettings', 'CANVAS_EVENTS'];\r\n    function spFunctionsController ($rootScope, spSettings, CANVAS_EVENTS) {\r\n        var vm = this; // jshint ignore:line\r\n\r\n        vm.clear = clear;\r\n        vm.invert = invert;\r\n        vm.random = random;\r\n\r\n        /////////////\r\n\r\n        function clear() {\r\n            $rootScope.$broadcast(CANVAS_EVENTS.clear);\r\n        }\r\n\r\n        function invert() {\r\n            $rootScope.$broadcast(CANVAS_EVENTS.invert);\r\n        }\r\n        \r\n        function random() {\r\n            $rootScope.$broadcast(CANVAS_EVENTS.random);\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad.settings')\r\n        .directive('spResolution', spResolution);\r\n\r\n    spResolution.$inject = ['spSettings', 'TOOLBOX'];\r\n    function spResolution(spSettings, TOOLBOX) {\r\n        // Use:\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            bindToController: true,\r\n            controller: spResolutionController,\r\n            controllerAs: 'vm',\r\n            link: link,\r\n            restrict: 'E',\r\n            scope: {\r\n            },\r\n            templateUrl: 'angular/src/settings/spResolution.tpl.html'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n        }\r\n    }\r\n    /* @ngInject */\r\n    spResolutionController.$inject = ['$rootScope', 'spSettings', 'CANVAS_EVENTS'];\r\n    function spResolutionController ($rootScope, spSettings, CANVAS_EVENTS) {\r\n        var vm = this; // jshint ignore:line\r\n\r\n        vm.res = {};\r\n        vm.res.x = null;\r\n        vm.res.y = null;\r\n        vm.submit = submit;\r\n\r\n        init();\r\n\r\n        //////////////\r\n\r\n        function init() {\r\n            var res = spSettings.getRes();\r\n\r\n            vm.res.x = res.x;\r\n            vm.res.y = res.y;\r\n        }\r\n\r\n        function submit() {\r\n            spSettings.setRes(vm.res.x, vm.res.y);\r\n            $rootScope.$broadcast(CANVAS_EVENTS.resize);\r\n            console.log('resize submitted');\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad')\r\n        .service('spSettings', spSettingsService);\r\n\r\n    spSettingsService.$inject = ['TOOLBOX', 'util'];\r\n    function spSettingsService(TOOLBOX, util) {\r\n        var sv = this; // jshint ignore:line\r\n\r\n        sv.getBG = getBG;\r\n        sv.getColor = getColor;\r\n        sv.getRes = getRes;\r\n        sv.getTool = getTool;\r\n        sv.setBG = setBG;\r\n        sv.setColor = setColor;\r\n        sv.setRes = setRes;\r\n        sv.setTool = setTool;\r\n\r\n        var opt = {};\r\n        opt.bg = {red: 255, green: 255, blue: 255};\r\n        opt.color = {red: 0, green: 0, blue: 0};\r\n        opt.res = {};\r\n        opt.res.x = 10;\r\n        opt.res.y = 10;\r\n        opt.tool = TOOLBOX.pencil;\r\n\r\n        ////////////////\r\n\r\n        function getBG() {\r\n            return opt.bg;\r\n        }\r\n\r\n        function getColor() {\r\n            return opt.color;\r\n        }\r\n\r\n        function getRes() {\r\n            return opt.res;\r\n        }\r\n\r\n        function getTool() {\r\n            return opt.tool;\r\n        }\r\n\r\n        function setBG(red, green, blue) {\r\n            if (util.isColor(red) && util.isColor(green) && util.isColor(blue)) {\r\n                opt.bg.red = red;\r\n                opt.bg.green = green;\r\n                opt.bg.blue = blue;\r\n            } else {\r\n                throw 'BG: Color not valid';\r\n            }\r\n        }\r\n\r\n        function setColor(red, green, blue) {\r\n            if (util.isColor(red) && util.isColor(green) && util.isColor(blue)) {\r\n                opt.color.red = red;\r\n                opt.color.green = green;\r\n                opt.color.blue = blue;\r\n            } else {\r\n                throw 'Pencil: Color not valid';\r\n            }\r\n        }\r\n\r\n        function setRes(x, y) {\r\n            if (util.isInt(x) && util.isInt(y) && x > 0 && y > 0) {\r\n                opt.res.x = x;\r\n                opt.res.y = y;\r\n            } else {\r\n                console.log('typeof x === ' + typeof x);\r\n                console.log('typeof y === ' + typeof y);\r\n                throw 'Invalid Resolution';\r\n            }\r\n        }\r\n\r\n        function setTool(tool) {\r\n            for (var prop in TOOLBOX) {\r\n                if (TOOLBOX.hasOwnProperty(prop)) {\r\n                    if (TOOLBOX[prop] === tool) {\r\n                        opt.tool = tool;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            throw 'Invalid tool';\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad')\r\n        .directive('spSettingsPanel', spSettings);\r\n\r\n    spSettings.$inject = [];\r\n    function spSettings() {\r\n        // Usage:\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            bindToController: true,\r\n            controller: spSettingsPanelController,\r\n            controllerAs: 'vm',\r\n            link: link,\r\n            restrict: 'E',\r\n            scope: {\r\n            },\r\n            templateUrl: 'angular/src/settings/spSettingsPanel.tpl.html'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n        }\r\n    }\r\n    /* @ngInject */\r\n    function spSettingsPanelController () {\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad.settings')\r\n        .directive('spToolbox', spToolbox);\r\n\r\n    spToolbox.$inject = [];\r\n    function spToolbox() {\r\n        // Usage:\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            bindToController: true,\r\n            controller: spToolboxController,\r\n            controllerAs: 'vm',\r\n            link: link,\r\n            restrict: 'E',\r\n            scope: {\r\n            },\r\n            templateUrl: 'angular/src/settings/spToolbox.tpl.html'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n        }\r\n    }\r\n    /* @ngInject */\r\n    spToolboxController.$inject = ['spSettings', 'TOOLBOX'];\r\n    function spToolboxController (spSettings, TOOLBOX) {\r\n        var vm = this; // jshint ignore:line\r\n\r\n        vm.isEraser = isEraser;\r\n        vm.isPencil = isPencil;\r\n        vm.setEraser = setEraser;\r\n        vm.setPencil = setPencil;\r\n\r\n        //////////////\r\n\r\n        function isEraser() {\r\n            return spSettings.getTool() === TOOLBOX.eraser;\r\n        }\r\n\r\n        function isPencil() {\r\n            return spSettings.getTool() === TOOLBOX.pencil;\r\n        }\r\n\r\n        function setEraser() {\r\n            spSettings.setTool(TOOLBOX.eraser);\r\n        }\r\n\r\n        function setPencil() {\r\n            spSettings.setTool(TOOLBOX.pencil);\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n\r\n    angular.module('sketchpad').constant('TOOLBOX', {\r\n        pencil: 'tools-pencil',\r\n        eraser: 'tools-eraser'\r\n    });\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('sketchpad')\r\n        .service('util', util);\r\n\r\n    util.$inject = [];\r\n    function util() {\r\n        var sv = this; // jshint ignore: line\r\n\r\n        sv.isColor = isColor;\r\n        sv.isInt = isInt;\r\n        sv.isRGB = isRGB;\r\n        sv.randomColor = randomColor;\r\n\r\n        ////////////////\r\n\r\n        function isColor(n) {\r\n            return isInt(n) && n >= 0 && n <= 255;\r\n        }\r\n\r\n        function isInt(n) {\r\n            if (typeof n !== 'number' || n % 1 !== 0) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function isRGB(obj) {\r\n            if (\r\n                typeof obj === 'object' &&\r\n                obj.red !== undefined && obj.red !== null &&\r\n                obj.green !== undefined && obj.green !== null &&\r\n                obj.blue !== undefined && obj.blue !== null\r\n            ) {\r\n                return isColor(obj.red) && isColor(obj.green) && isColor(obj.blue);\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        function randomColor() {\r\n            var res = {};\r\n            res.red = Math.floor(Math.random() * 255);\r\n            res.green = Math.floor(Math.random() * 255);\r\n            res.blue = Math.floor(Math.random() * 255);\r\n            \r\n            if (isRGB(res)) {\r\n                return res;\r\n            } else {\r\n                throw 'randomColor result not compliant with color definition (isRGB failed)';\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}